#+AUTHOR: Shaun Reiger
#+TITLE: GNU Emacs Configuration

* Emacs Initialization

** Package Sources

#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			("melpa" . "https://melpa.org/packages/")
			("org" . "https://orgmode.org/elpa/")))
#+END_SRC

** use-package

#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

	(use-package delight :ensure t)
	(use-package use-package-ensure-system-package :ensure t)
#+END_SRC

** Smart defaults

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   use-package-always-ensure t                      ; Avoid the :ensure keyword for each package
   user-full-name "Shaun Reiger"                    ; Set the full name of the current user
   user-mail-address "reigers@mymacewan.ca"         ; Set the email address of the current user
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
#+END_SRC

** Customization

To avoid overloading the GNU Emacs custormization =init.el= file made by the
user with the UI, I add the generated code in a separate file.


#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+END_SRC

** Theme

I like the light on dark because I find it to be more restful.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nord-theme
    :config
    (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes"))
    (load-theme 'nord t))

  (use-package smart-mode-line
    :defer 0.1
    :custom (sml/theme 'respectful)
    :config (sml/setup))
#+END_SRC

** Turn off mouse interface

Since I never use the mouse with GNU Emacs, I prefer not to use certain
graphical elements as seen as the menu bar, toolbar, scrollbar and tooltip that
I find invasive.

#+BEGIN_SRC emacs-lisp :tangle yes
  (when window-system
    (menu-bar-mode -1)                              ; Disable the menu bar
    (scroll-bar-mode -1)                            ; Disable the scroll bar
    (tool-bar-mode -1)                              ; Disable the tool bar
    (tooltip-mode -1))                              ; Disable the tooltips
#+END_SRC

** XDG

In order to have the user's home as clean as possible, I follow the
[[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG base directory specification]].

*NOTE:* you can find out more by going to my [[https://github.com/rememberYou/dotfiles][dotfiles]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")

  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+END_SRC

* Languages

** CSS

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package css-mode
    :custom (css-indent-offset 2))
#+END_SRC

*** =emmet-mode=

Powerful minor mode to produce HTML from CSS-like selector.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :defer 6
    :delight
    :hook (sgml-mode css-mode web-mode))
#+END_SRC


** CSV

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode)
#+END_SRC

** Docker

I like to use Docker when I need to install various databases or other services
that only work on a particular operating system while keeping my operating
system clean.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :delight "δ "
    :mode "Dockerfile\\'")
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elisp-mode :ensure nil :delight "ξ ")
#+END_SRC


*** Eldoc

Provides minibuffer hints when working with Emacs Lisp.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eldoc
    :delight
    :hook (emacs-lisp-mode . eldoc-mode))
#+END_SRC

** HTML

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sgml-mode
    :delight html-mode "HTML"
    :hook
    ((html-mode . my/html-set-pretty-print-function)
     (html-mode . sgml-electric-tag-pair-mode)
     (html-mode . sgml-name-8bit-mode)
     (html-mode . toggle-truncate-lines))
    :custom (sgml-basic-offset 2)
    :preface
    (defun my/html-set-pretty-print-function ()
      (setq my/pretty-print-function #'sgml-pretty-print)))
#+END_SRC

** JavaScript

For my JavaScript configuration, I took my sources from the Nicolas Petton's
blog which I found very well explained.

[[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Setting up Emacs for JavaScript (part #1)]]
[[https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html][Setting up Emacs for JavaScript (part #2)]]

I like to use [[https://prettier.io/][prettier]] to get my TypeScript code clean. To use it,
don't forget to install it with your package manager.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package prettier-js
    :delight
    :custom (prettier-js-args '("--print-width" "100"
                                "--single-quote" "true"
                                "--trailing-comma" "all")))
#+END_SRC


*** =js2-mode=

By default, GNU Emacs uses =js-mode= as major mode for JavaScript buffers and I
prefer use =js2-mode= instead because of his abilities to parses buffers and
builds an AST for things like syntax highlighting.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :hook ((js2-mode . js2-imenu-extras-mode)
           (js2-mode . prettier-js-mode))
    :mode "\\.js\\'"
    :custom (js-indent-level 2))
#+END_SRC

*** =js2-refactor=

Provides powerful refactoring based on the AST generated by =js2-mode=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-refactor
    :defer 5
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill)
                ("M-." . nil))
    :hook ((js2-mode . js2-refactor-mode)
           (js2-mode . (lambda ()
                         (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))
    :config (js2r-add-keybindings-with-prefix "C-c C-r"))
#+END_SRC

*** =xref-js2=

Makes it easy to jump to function references or definitions.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package xref-js2 :defer 5)
#+END_SRC


** JSON

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :delight "J "
    :mode "\\.json\\'"
    :hook (before-save . my/json-mode-before-save-hook)
    :preface
    (defun my/json-mode-before-save-hook ()
      (when (eq major-mode 'json-mode)
        (json-pretty-print-buffer))))
#+END_SRC


** LaTeX

I use LaTeX for my reports, CVs, summaries, etc.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex
    :hook (LaTeX-mode . reftex-mode)
    :custom
    (TeX-PDF-mode t)
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-master 'dwim)
    (TeX-parse-self t)
    (TeX-source-correlate-mode t)
    (TeX-view-program-selection '((output-pdf "Evince")
                                  (output-html "xdg-open"))))

  (use-package bibtex
    :after auctex
    :hook (bibtex-mode . my/bibtex-fill-column)
    :preface
    (defun my/bibtex-fill-column ()
      "Ensures that each entry does not exceed 120 characters."
      (setq fill-column 120)))

  (use-package company-auctex
    :after (auctex company)
    :config (company-auctex-init))

  (use-package company-math :after (auctex company))
#+END_SRC

I want a TeX engine that can deal with Unicode and use any font I like.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default TeX-engine 'xetex)
#+END_SRC




** SQL

=sql-indent= gives me the possibility to easily manage =.sql= files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sql-indent
    :after (:any sql sql-interactive-mode)
    :delight sql-mode "Σ ")
#+END_SRC

** TypeScript

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tide
    :after (company flycheck)
    :preface
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))
    :hook (before-save . tide-format-before-save))
#+END_SRC

* Advanced Configuration

** Alert

Most packages use =alerts= to make notifications with =libnotify=. Don't forget
to first install a notification daemon, like =dunst=.

#+BEGIN_QUOTE
Alert is a Growl-workalike for Emacs which uses a common notification interface
and multiple, selectable "styles", whose use is fully customizable by the user.

[[https://github.com/jwiegley/alert][John Wiegley]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package alert
    :custom (alert-default-style 'libnotify))
#+END_SRC

** Auto-Completion

=company= provides auto-completion at point and to Displays a small pop-in
containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :defer 0.5
    :delight
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+END_SRC

I use =company= with =company-box= that allows a company front-end with icons.

#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package company-box
     :after company
     :delight
     :hook (company-mode . company-box-mode))
#+END_SRC


** Buffers

Buffers can quickly become a mess. For some people, it's not a problem, but I
like being able to find my way easily.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :defer 0.2
    :bind ("C-x C-b" . ibuffer))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))
    :hook (ibuffer . my/ibuffer-projectile))
#+END_SRC

** Ending Up

I'm using an =.org= file to maintain my GNU Emacs configuration. However, at his
launch, it will loads the =config.el= source file for a faster loading.

The code below, executes =org-babel-tangle= asynchronously when
=config.org= is saved.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async)

  (defvar *config-file* (expand-file-name "config.org" user-emacs-directory)
    "The configuration file.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers around for later inspection.")

  (defun my/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun my/config-tangle ()
    "Tangles the org file asynchronously."
    (when (my/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (my/async-babel-tangle *config-file*)))

  (defun my/async-babel-tangle (org-file)
    "Tangles the org file asynchronously."
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+END_SRC


** Spelling

*** Abbreviations

According to a list of misspelled words, =abbrev= auto-correct these words on
the fly.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package abbrev
    :defer 1
    :ensure nil
    :delight
    :hook (text-mode . abbrev-mode)
    :custom (abbrev-file-name (expand-file-name ".abbrev_defs" user-emacs-directory))
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+END_SRC

*** Fly Spell

For the other words that would not be in my list of abbreviations, =flyspell=
enables spell checking on-the-fly in GNU Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flyspell
    :defer 1
    :delight
    :custom
    (flyspell-abbrev-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))

  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-word-generic))
    :custom (flyspell-correct-interface 'flyspell-correct-ivy))

  (use-package ispell
    :custom
    (ispell-silently-savep t))
#+END_SRC


** History

Provides the ability to have commands and their history saved so that whenever
you return to work, you can re-run things as you need them. This is not a
radical function, it is part of a good user experience.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length t)
    (savehist-additional-variables
     '(kill-ring
       search-ring
       regexp-search-ring))
    (savehist-file (expand-file-name "history" user-emacs-directory))
    (savehist-save-minibuffer-history 1)
    :config (savehist-mode 1))
#+END_SRC

** Rest Client

This is a tool to manually explore and test HTTP REST webservices.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package restclient
	:ensure t)
#+END_SRC

** Golang

Go-mode provides basic language support, and gofmt will be called on each save
to keep code tidy, use eldoc to display documentation.

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save))

#+END_SRC

